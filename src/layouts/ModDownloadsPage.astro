---
import Layout from '../layouts/Layout.astro';
import Title from '../components/Title.astro';

const { frontmatter } = Astro.props;
import json from '../downloads.json'
import db from '../database.json'

var previousURL = Astro.url.pathname.substring(0, Astro.url.pathname.length - "downloads/".length);

var mod = db.find(x => x.mod_guid == frontmatter.mod_guid)

var days : number[] = []
var downloads : number[] = []
Object.keys(json).forEach(key => {
    const dmy = key.split("/")
    const day = new Date(parseInt(dmy[2]), parseInt(dmy[1]) - 1, parseInt(dmy[0])).getTime()
    const downloadCount = (json as any)[key][frontmatter.mod_guid]

    if (downloadCount != undefined) {
        downloads.push(downloadCount)
        days.push(day);
    }
});

var releaseDateTime = new Date(mod?.release_date ?? "").getTime();
if (downloads.find(x => x == 0) == undefined && days.find(x => x == releaseDateTime) == undefined) {
    downloads.push(0)
    days.push(releaseDateTime)
}

const indices = Array.from(days.keys());
indices.sort((a, b) => days[a] < days[b] ? -1 : 1)

const sortedDates = indices.map(i => days[i])
const sortedDownloads = indices.map(i => downloads[i])

var firstDate = new Date(Math.min(...sortedDates));
var lastDate = new Date(Math.max(...sortedDates));

let dayLength = 24 * 60 * 60 * 1000
let i = 1;
for (var t = firstDate.getTime() + dayLength; t < lastDate.getTime(); t += dayLength) {
    if (sortedDates[i] <= t) continue;

    // interp time
    // this means i is too far ahead and we need to add in new data before it
    const t0 = sortedDates[i-1]
    const t1 = sortedDates[i]
    const d0 = sortedDownloads[i-1]
    const d1 = sortedDownloads[i]

    const d = d0 + (t - t0) * (d1 - d0) / (t1 - t0)

    sortedDates.splice(i, 0, t)
    sortedDownloads.splice(i, 0, d)
    i++
}

---

<download-chart data-days={sortedDates} data-downloads={sortedDownloads}></download-chartt>

<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"/>
<script>
    class DownloadChart extends HTMLElement {
        constructor() {
            super();
            const dates = this.dataset.days?.split(",").map((x : string) => parseInt(x)) as number[];
            const downloads = this.dataset.downloads?.split(",").map((x : string) => parseInt(x)) as number[];

            const stringDates = dates.map((x) => new Date(x).toLocaleDateString(undefined, {month: 'long', day: 'numeric', year: 'numeric'}))

            //@ts-ignore
            new Chart("myChart", {
                data: {
                    labels: stringDates,
                    datasets: [{
                        type: "line",
                        fill: false,
                        lineTension: 0,
                        backgroundColor: "rgba(255,255,255,1.0)",
                        borderColor: "rgba(255,255,255,1.0)",
                        pointBorderWidth: 0,
                        borderWidth: 4,
                        data: downloads
                    }]
                },
                options: {
                    legend: {display: false},
                    layout: {
                        padding: {
                            left: 0,
                            right: 80,
                            top: 0,
                            bottom: 0
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                fontSize: 20,
                                beginAtZero: true,
                                // Only show first and last ticks
                                callback: function(value : string, index : number, values : string[]) {
                                    return (index == 0 || index == values.length / 2 || value == 0) ? value : ""
                                },
                                fontColor: 'white'
                            },
                            gridLines: {
                                color: "rgba(255,255,255,0.1)"
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                fontSize: 16,
                                fontColor: 'white'
                            },
                            gridLines: {
                                color: "rgba(255,255,255,0.1)"
                            }
                        }]
                    }
                }
            });
        }
    }

    customElements.define('download-chart', DownloadChart);
</script>

<Layout title="DREDGE Mods">
    <main>
        <div style="padding-bottom: 8px">
            <a href={previousURL}>&lt Back to {mod?.name}</a>            
        </div>
        <Title title={(mod?.name ?? "???") + " downloads over time"} />
        {mod == undefined ? 
            <div>Something went wrong! Couldn't find mod with id {frontmatter.mod_guid == undefined ? "UNDEFINED" : frontmatter.mod_guid}</div> :
            <div>
                <div class="w-100 justify-content-center d-flex">
                    <div class="w-md-50">
                        <p>{mod.name} has been downloaded <b>{sortedDownloads[sortedDownloads.length - 1] - sortedDownloads[Math.max(sortedDownloads.length - 8, 0)]}</b> times this week,
                        and <b>{sortedDownloads[sortedDownloads.length - 1]}</b> times total!</p>
                    </div>
                </div>
                <div class="w-100 justify-content-center d-flex">
                    <canvas id="myChart" style="width:100%; padding-right=80px;"></canvas>
                </div>
            </div>
        }
    </main>
</Layout>